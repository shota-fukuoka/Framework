//=============================================================================
//
// color.cpp
// Author : SHOTA FUKUOKA
//
//=============================================================================

//*****************************************************************************
// ÉCÉìÉNÉãÅ[Éh
//*****************************************************************************
#include <math.h>
#include "color.h"

///////////////////////////////////////////////////////////////////////////////
//ÉRÉìÉXÉgÉâÉNÉ^
///////////////////////////////////////////////////////////////////////////////
COLOR::COLOR(const float nr, const float ng, const float nb, const float na)
	:r(nr)
	, g(ng)
	, b(nb)
	, a(na)
{
}


///////////////////////////////////////////////////////////////////////////////
//â¡éZ
///////////////////////////////////////////////////////////////////////////////
COLOR COLOR::operator+(const COLOR &Color) const
{
	COLOR color;

	color.r = r + Color.r;
	color.g = g + Color.g;
	color.b = b + Color.b;
	color.a = a + Color.a;

	return color;
}

///////////////////////////////////////////////////////////////////////////////
//â¡éZÅÅ
///////////////////////////////////////////////////////////////////////////////
COLOR& COLOR::operator+=(const COLOR &Color)
{
	r += Color.r;
	g += Color.g;
	b += Color.b;
	a += Color.a;

	return *this;
}

///////////////////////////////////////////////////////////////////////////////
//å∏éZ
///////////////////////////////////////////////////////////////////////////////
COLOR COLOR::operator-(const COLOR &Color) const
{
	COLOR color;

	color.r = r - Color.r;
	color.g = g - Color.g;
	color.b = b - Color.b;
	color.a = a - Color.a;

	return color;
}

///////////////////////////////////////////////////////////////////////////////
//å∏éZÅÅ
///////////////////////////////////////////////////////////////////////////////
COLOR& COLOR::operator-=(const COLOR &Color)
{

	r -= Color.r;
	g -= Color.g;
	b -= Color.b;
	a -= Color.a;

	return *this;
}


///////////////////////////////////////////////////////////////////////////////
//èÊéZ
///////////////////////////////////////////////////////////////////////////////
COLOR COLOR::operator*(const float f) const
{
	COLOR color;

	color.r = r * f;
	color.g = g * f;
	color.b = b * f;
	color.a = a * f;

	return color;
}

///////////////////////////////////////////////////////////////////////////////
//èÊéZÅÅ
///////////////////////////////////////////////////////////////////////////////
COLOR& COLOR::operator*=(const float f)
{
	r *= f;
	g *= f;
	b *= f;
	a *= f;

	return *this;
}

///////////////////////////////////////////////////////////////////////////////
//èúéZ
///////////////////////////////////////////////////////////////////////////////
COLOR COLOR::operator/(const float f) const
{
	COLOR color;

	color.r = r / f;
	color.g = g / f;
	color.b = b / f;
	color.a = a / f;

	return color;
}

///////////////////////////////////////////////////////////////////////////////
//èúéZÅÅ
///////////////////////////////////////////////////////////////////////////////
COLOR& COLOR::operator/=(const float f)
{
	r /= f;
	g /= f;
	b /= f;
	a /= f;

	return *this;
}